//All times are automatic
//add 0.24 for hand times for events shorter than 400m
//add 0.14 for hand times in the 400m

//modec relates to Men's outdoor decathlon for keeping track of totals
//mihept relates to Men's indoor heptathlon for keeping track of totals

//Function to call appropriate functions for calculation.
function calculateScoring(combinedEvent, subEvent, mark)
{
//Mark is not empty
  if (mark != '')
	{
	//Check for valid marks for both meters and seconds. call functions.
		if (! ( isValidMetricMark(mark) || isValidTime(mark) ))
			alert('Invalid mark (please use the format 0.00 for metric marks or mm:ss.ss for times)');
		else
		{
		//doCalculation and update total points for correct -athlon (dec or hept)
			document.getElementById(combinedEvent + '_' + subEvent).innerHTML = doCalculation(subEvent, mark);
			document.getElementById(combinedEvent + '_total').innerHTML = getTotalPts(combinedEvent);
		}
	}
	else
	{
	//return '' (no points, because the value was not calculable) and update total
		document.getElementById(combinedEvent + '_' + subEvent).innerHTML = '';
		document.getElementById(combinedEvent + '_total').innerHTML = getTotalPts(combinedEvent);
	}
}

//Keep totla points, for either decathlon or heptathlon
function getTotalPts(combinedEvent)
{
	var totalPts = 0;
	var eventsArray = getSubEvents(combinedEvent);
	
	for (var i = 0; i < eventsArray.length; i++)
	{
		if (document.getElementById(combinedEvent + '_' + eventsArray[i]).innerHTML)
			totalPts += parseInt(document.getElementById(combinedEvent + '_' + eventsArray[i]).innerHTML);
	}
	
	return totalPts;
}

//Determine which -athlon is being performed. Called by total points.
function getSubEvents(combinedEvent)
{
	var eventsArray;
	
	switch (combinedEvent)
	{
		case 'modec' :
			eventsArray = new Array('100', 'LJ', 'SP', 'HJ', '400', '110H', 'DT', 'PV', 'JT', '1500');
			break;
		case 'mihept' :
			eventsArray = new Array('60', 'LJ', 'SP', 'HJ', '60H', 'PV', '1000');
			break;
	}
	
	return eventsArray;
}

	//The values below are found based on set formulas set by International Track association.
	//a = weighted factor. used in the equation
	//b = arbitrary starting point (where points = 0)
	//c = arbitrary weight of each unit
	
	//P = sec, cm, or meters, depending on the event. 
	//It is the mark (second passed in value) and will be used in calculate function
	//Points = A*(B-P)powC for Running Events 
	//Points = A*(P-B)powC for Field Events 

	//I'm not sure how they came up with those. Many years of science
	//Can be found here: http://www.oocities.org/mdetting/sports/decathlon-points-formula.html


//function to determine which event it is. Uses large switch statement.
function doCalculation(eventName, mark)
{
	
	var a, b, c;
	
		switch (eventName)
		{
			// Indoor events
			case '60' :
				a = 58.0150;
				b = 11.5;
				c = 1.81;
					return calculateRunning(getSeconds(mark), a, b, c);
				break;
			case '1000' :
				a = 0.08713;
				b = 305.5;
				c = 1.85;
				return calculateRunning(getSeconds(mark), a, b, c);
				break;
			case '60H' :
				a = 20.5173;
				b = 15.5;
				c = 1.92;
				return calculateRunning(getSeconds(mark), a, b, c);
				break;
			
			// Outdoor events, indoor events not shown above (calculate the same)
			case '100' :
				a = 25.4347;
				b = 18;
				c = 1.81;
				return calculateRunning(getSeconds(mark), a, b, c);
				break;
			case '200' :
				a = 5.8425;
				b = 38;
				c = 1.81;
				return calculateRunning(getSeconds(mark), a, b, c);
				break;
			case '400' :
				a = 1.53775;
				b = 82;
				c = 1.81;
				return calculateRunning(getSeconds(mark), a, b, c);
				break;
			case '1500' :
				a = 0.03768;
				b = 480;
				c = 1.85;
				return calculateRunning(getSeconds(mark), a, b, c);
				break;
			case '110H' :
				a = 5.74352;
				b = 28.5;
				c = 1.92;
				return calculateRunning(getSeconds(mark), a, b, c);
				break;
			case 'HJ' :
				a = 0.8465;
				b = 75;
				c = 1.42;
				return calculateField(getCentimeters(mark), a, b, c);
				break;
			case 'PV' :
				a = 0.2797;
				b = 100;
				c = 1.35;
				return calculateField(getCentimeters(mark), a, b, c);
				break;
			case 'LJ' :
				a = 0.14354;
				b = 220;
				c = 1.40;
				return calculateField(getCentimeters(mark), a, b, c);
				break;
			case 'SP' :
				a = 51.39;
				b = 1.5;
				c = 1.05;
				return calculateField(getMeters(mark), a, b, c);
				break;
			case 'DT' :
				a = 12.91;
				b = 4;
				c = 1.10;
				return calculateField(getMeters(mark), a, b, c);
				break;
			case 'JT' :
				a = 10.14;
				b = 7;
				c = 1.08;
				return calculateField(getMeters(mark), a, b, c);
				break;
			default :
				return null;
				break;
		}
}

//Calculate running events
//Points = A*(B-P)powC for Running Events 
function calculateRunning(mark, a, b, c)
{
	var points = Math.floor(a * Math.pow(b - mark, c));
	return isNaN(points) ? 0 : points;
}

//Calculate field events
//Points = A*(P-B)powC for Field Events
function calculateField(mark, a, b, c)
{
	var points = Math.floor(a * Math.pow(mark - b, c));
	return isNaN(points) ? 0 : points;
}

//get setconds if given time in mm:ss:ss
function getSeconds(mark)
{
	var i;
	var mySeconds = 0;
	var tempTime = StrReverse(mark);
	var timeArray = tempTime.split(':')		// reverse the time string and split it at the colons
	
	for (i = 0; i < timeArray.length; i++)
		mySeconds += StrReverse(timeArray[i]) * Math.pow(60, i)
	
	return mySeconds;
}

function getMeters(mark)
{
	return mark;
}

//100cm in a meter.
function getCentimeters(mark)
{
	return mark * 100;
}

//Check to see if a valid mark in meters, based on the format entered.
function isValidMetricMark(mark)
{
	return (/^[0-9]{1,3}(\.[0-9]{1,2}){0,1}$/).test(mark);
}

//Check to see if a valid mark in time (mm:ss:ss), based on the format entered.
function isValidTime(mark)
{
	return (/(^([0-9]{1,2}\:){0,1}[0-9]{2}(\.[0-9]{1,2}){0,1}$)|(^[0-9]{1,2}(\.[0-9]{1,2}){0,1}$)/).test(mark);
}

//used in Get seconds function
function StrReverse(str)
{
	if (! str)
		return '';
	else
	{
		var revstr = '';
		for (i = str.length - 1; i >= 0; i--)
			revstr += str.charAt(i)
		
		return revstr;
	}
}
